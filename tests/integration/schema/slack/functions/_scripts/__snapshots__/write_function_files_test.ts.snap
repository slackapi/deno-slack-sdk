export const snapshot = {};

snapshot[`write_function_files.ts main function snapshot test 1`] = `
[
  "../send_message.ts",
  "../send_message_test.ts",
  "../mod.ts",
]
`;

snapshot[`write_function_files.ts main function snapshot test 2`] = `
[
  "/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
" +
    'import { DefineFunction } from "../../../functions/mod.ts";
' +
    'import SchemaTypes from "../../schema_types.ts";
' +
    'import SlackTypes from "../schema_types.ts";
' +
    "
" +
    'export default DefineFunction({callback_id: "slack#/functions/send_message",
' +
    'source_file: "",
' +
    'title: "Send a message to channel",
' +
    'description: "Send a message to channel",
' +
    "input_parameters: {properties: {channel_id: {type: SlackTypes.channel_id,
" +
    'description: "Search all channels",
' +
    'title: "Select a channel"},
' +
    "message: {type: SlackTypes.rich_text,
" +
    'description: "Add a message",
' +
    'title: "Add a message"},
' +
    "thread_ts: {type: SlackTypes.message_ts,
" +
    \`description: "Provide another message's ts value to make this message a reply",
\` +
    \`title: "Another message's timestamp value"},
\` +
    "object: {type: SchemaTypes.object,
" +
    'description: "Object type",
' +
    'title: "Object",
' +
    "properties: {event_type: {type: SchemaTypes.string},
" +
    "event_payload: {type: SchemaTypes.object}},
" +
    "additionalProperties: true,
" +
    'required: ["event_type","event_payload"]},
' +
    "test_array: {type: SchemaTypes.array,
" +
    'description: "test an array",
' +
    'title: "test array",
' +
    "items: {type: SchemaTypes.string}},
" +
    "interactive_blocks: {type: SlackTypes.blocks,
" +
    'description: "Button(s) to send with the message",
' +
    'title: "Button(s) to send with the message"}},
' +
    'required: ["channel_id","message"]},
' +
    "output_parameters: {properties: {message_ts: {type: SlackTypes.message_ts,
" +
    'description: "Message time stamp",
' +
    'title: "Message time stamp"},
' +
    "interactivity: {type: SlackTypes.interactivity,
" +
    'description: "Interactivity context",
' +
    'title: "interactivity"},
' +
    "message_context: {type: SlackTypes.message_context,
" +
    'description: "Reference to the message sent",
' +
    'title: "Reference to the message sent"}},
' +
    'required: ["message_ts","message_context"]}});',
  "/** This file was autogenerated. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
" +
    'import { assertEquals, assertExists } from "../../../dev_deps.ts";
' +
    'import { DefineWorkflow } from "../../../workflows/mod.ts";
' +
    'import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
' +
    'import SchemaTypes from "../../schema_types.ts";
' +
    'import SlackTypes from "../schema_types.ts";
' +
    'import SendMessage from "./send_message.ts";
' +
    "
" +
    'Deno.test("SendMessage generates valid FunctionManifest", () => {assertEquals(SendMessage.definition.callback_id, "slack#/functions/send_message");
' +
    'const expected: ManifestFunctionSchema = {source_file: "",
' +
    'title: "Send a message to channel",
' +
    'description: "Send a message to channel",
' +
    "input_parameters: {properties: {channel_id: {type: SlackTypes.channel_id,
" +
    'description: "Search all channels",
' +
    'title: "Select a channel"},
' +
    "message: {type: SlackTypes.rich_text,
" +
    'description: "Add a message",
' +
    'title: "Add a message"},
' +
    "thread_ts: {type: SlackTypes.message_ts,
" +
    \`description: "Provide another message's ts value to make this message a reply",
\` +
    \`title: "Another message's timestamp value"},
\` +
    "object: {type: SchemaTypes.object,
" +
    'description: "Object type",
' +
    'title: "Object",
' +
    "properties: {event_type: {type: SchemaTypes.string},
" +
    "event_payload: {type: SchemaTypes.object}},
" +
    "additionalProperties: true,
" +
    'required: ["event_type","event_payload"]},
' +
    "test_array: {type: SchemaTypes.array,
" +
    'description: "test an array",
' +
    'title: "test array",
' +
    "items: {type: SchemaTypes.string}},
" +
    "interactive_blocks: {type: SlackTypes.blocks,
" +
    'description: "Button(s) to send with the message",
' +
    'title: "Button(s) to send with the message"}},
' +
    'required: ["channel_id","message"]},
' +
    "output_parameters: {properties: {message_ts: {type: SlackTypes.message_ts,
" +
    'description: "Message time stamp",
' +
    'title: "Message time stamp"},
' +
    "interactivity: {type: SlackTypes.interactivity,
" +
    'description: "Interactivity context",
' +
    'title: "interactivity"},
' +
    "message_context: {type: SlackTypes.message_context,
" +
    'description: "Reference to the message sent",
' +
    'title: "Reference to the message sent"}},
' +
    'required: ["message_ts","message_context"]}};
' +
    "const actual = SendMessage.export();
" +
    "
" +
    "assertEquals(actual, expected);});
" +
    "
" +
    'Deno.test("SendMessage can be used as a Slack function in a workflow step", () => {const testWorkflow = DefineWorkflow({callback_id: "test_SendMessage_slack_function", 
' +
    'title: "Test SendMessage", 
' +
    'description: "This is a generated test to test SendMessage"});
' +
    'testWorkflow.addStep(SendMessage, {channel_id: "test",
' +
    'message: "test"});
' +
    "const actual = testWorkflow.steps[0].export();
" +
    "
" +
    'assertEquals(actual.function_id, "slack#/functions/send_message");
' +
    'assertEquals(actual.inputs, {channel_id: "test",
' +
    'message: "test"});});
' +
    "
" +
    'Deno.test("All outputs of Slack function SendMessage should exist", () => {const testWorkflow = DefineWorkflow({callback_id: "test_SendMessage_slack_function", 
' +
    'title: "Test SendMessage", 
' +
    'description: "This is a generated test to test SendMessage"});
' +
    'const step = testWorkflow.addStep(SendMessage, {channel_id: "test",
' +
    'message: "test"});
' +
    "assertExists(step.outputs.message_ts);
" +
    "assertExists(step.outputs.interactivity);
" +
    "assertExists(step.outputs.message_context);});",
  "/** This file was autogenerated on Fri Sep 08 2023. Follow the steps in src/schema/slack/functions/README.md to rebuild **/
" +
    'import SendMessage from "./send_message.ts";
' +
    "
" +
    "const SlackFunctions = {SendMessage} as const;
" +
    "
" +
    "export default SlackFunctions;",
]
`;
