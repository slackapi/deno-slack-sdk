/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import {
  assertEquals,
  assertExists,
  assertNotStrictEquals,
} from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import { SlackPrimitiveTypes } from "../../slack/types/mod.ts";
import SlackTypes from "../schema_types.ts";
import ShareCanvas from "./share_canvas.ts";

Deno.test("ShareCanvas generates valid FunctionManifest", () => {
  assertEquals(
    ShareCanvas.definition.callback_id,
    "slack#/functions/share_canvas",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Share a canvas",
    input_parameters: {
      properties: {
        canvas_id: {
          type: SlackPrimitiveTypes.canvas_id,
          description: "Search all canvases",
          title: "Select a canvas",
        },
        channel_ids: {
          type: SchemaTypes.array,
          description: "Select channels",
          title: "Select channels",
          items: { type: SlackTypes.channel_id },
        },
        user_ids: {
          type: SchemaTypes.array,
          description: "Search users",
          title: "Select people",
          items: { type: SlackTypes.user_id },
        },
        access_level: {
          type: SchemaTypes.string,
          description: "Select an option",
          title: "Select access level",
        },
        message: {
          type: SlackTypes.rich_text,
          description: "Add a message",
          title: "Add a message",
        },
      },
      required: ["canvas_id", "access_level"],
    },
    output_parameters: {
      properties: {
        canvas_id: {
          type: SlackPrimitiveTypes.canvas_id,
          description: "Canvas link",
          title: "Canvas link",
        },
      },
      required: [],
    },
  };
  const actual = ShareCanvas.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("ShareCanvas can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ShareCanvas_slack_function",
    title: "Test ShareCanvas",
    description: "This is a generated test to test ShareCanvas",
  });
  testWorkflow.addStep(ShareCanvas, {
    canvas_id: "test",
    access_level: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/share_canvas");
  assertEquals(actual.inputs, { canvas_id: "test", access_level: "test" });
});

Deno.test("All outputs of Slack function ShareCanvas should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ShareCanvas_slack_function",
    title: "Test ShareCanvas",
    description: "This is a generated test to test ShareCanvas",
  });
  const step = testWorkflow.addStep(ShareCanvas, {
    canvas_id: "test",
    access_level: "test",
  });
  assertExists(step.outputs.canvas_id);
});
