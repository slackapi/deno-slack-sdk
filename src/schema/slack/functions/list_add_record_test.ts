/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import {
  assertEquals,
  assertExists,
  assertNotStrictEquals,
} from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import ListAddRecord from "./list_add_record.ts";

Deno.test("ListAddRecord generates valid FunctionManifest", () => {
  assertEquals(
    ListAddRecord.definition.callback_id,
    "slack#/functions/list_add_record",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Add an item to a list",
    description: "Add an item to a given list",
    input_parameters: {
      properties: {
        list_id: {
          type: SlackTypes.list_id,
          description: "Search all lists",
          title: "Select a list",
        },
        columns: {
          type: SchemaTypes.object,
          description: "Enter the data for each field",
          title: "Fields",
        },
      },
      required: ["list_id", "columns"],
    },
    output_parameters: {
      properties: {
        record_id: {
          type: SchemaTypes.string,
          description: "The item ID of the new item",
          title: "Item ID",
        },
        record_url: {
          type: SchemaTypes.string,
          description: "The URL of the new item",
          title: "Item URL",
        },
      },
      required: ["record_id", "record_url"],
    },
  };
  const actual = ListAddRecord.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("ListAddRecord can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ListAddRecord_slack_function",
    title: "Test ListAddRecord",
    description: "This is a generated test to test ListAddRecord",
  });
  testWorkflow.addStep(ListAddRecord, { list_id: "test", columns: "test" });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/list_add_record");
  assertEquals(actual.inputs, { list_id: "test", columns: "test" });
});

Deno.test("All outputs of Slack function ListAddRecord should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_ListAddRecord_slack_function",
    title: "Test ListAddRecord",
    description: "This is a generated test to test ListAddRecord",
  });
  const step = testWorkflow.addStep(ListAddRecord, {
    list_id: "test",
    columns: "test",
  });
  assertExists(step.outputs.record_id);
  assertExists(step.outputs.record_url);
});
