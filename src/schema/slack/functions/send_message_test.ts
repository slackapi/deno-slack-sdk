/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import { assertEquals, assertExists } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import SendMessage from "./send_message.ts";

Deno.test("SendMessage generates valid FunctionManifest", () => {
  assertEquals(
    SendMessage.definition.callback_id,
    "slack#/functions/send_message",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Send a message to channel",
    description: "Send a message to channel",
    input_parameters: {
      properties: {
        channel_id: {
          type: SlackTypes.channel_id,
          description: "Search all channels",
          title: "Select a channel",
        },
        message: {
          type: SlackTypes.rich_text,
          description: "Add a message",
          title: "Add a message",
        },
        metadata: {
          type: SchemaTypes.object,
          description:
            "Metadata you post to Slack is accessible to any app or user who is a member of that workspace",
          title: "Message metadata",
          properties: {
            event_type: { type: SchemaTypes.string },
            event_payload: { type: SchemaTypes.object },
          },
          additionalProperties: true,
          required: ["event_type", "event_payload"],
        },
        interactive_blocks: {
          type: SlackTypes.blocks,
          description: "Button(s) to send with the message",
          title: "Button(s) to send with the message",
        },
      },
      required: ["channel_id", "message"],
    },
    output_parameters: {
      properties: {
        message_timestamp: {
          type: SlackTypes.timestamp,
          description: "Message time stamp",
          title: "Message time stamp",
        },
        message_link: {
          type: SchemaTypes.string,
          description: "Message link",
          title: "Message link",
        },
        action: {
          type: SchemaTypes.object,
          description: "Button interactivity data",
          title: "Button interactivity data",
        },
        interactivity: {
          type: SlackTypes.interactivity,
          description: "Interactivity context",
          title: "interactivity",
        },
        message_context: {
          type: SlackTypes.message_context,
          description: "Reference to the message sent",
          title: "Reference to the message sent",
        },
      },
      required: ["message_timestamp", "message_link", "message_context"],
    },
  };
  const actual = SendMessage.export();

  assertEquals(actual, expected);
});

Deno.test("SendMessage can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SendMessage_slack_function",
    title: "Test SendMessage",
    description: "This is a generated test to test SendMessage",
  });
  testWorkflow.addStep(SendMessage, { channel_id: "test", message: "test" });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/send_message");
  assertEquals(actual.inputs, { channel_id: "test", message: "test" });
});

Deno.test("All outputs of Slack function SendMessage should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_SendMessage_slack_function",
    title: "Test SendMessage",
    description: "This is a generated test to test SendMessage",
  });
  const step = testWorkflow.addStep(SendMessage, {
    channel_id: "test",
    message: "test",
  });
  assertExists(step.outputs.message_timestamp);
  assertExists(step.outputs.message_link);
  assertExists(step.outputs.action);
  assertExists(step.outputs.interactivity);
  assertExists(step.outputs.message_context);
});
