/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import {
  assertEquals,
  assertExists,
  assertNotStrictEquals,
} from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import CopyList from "./copy_list.ts";

Deno.test("CopyList generates valid FunctionManifest", () => {
  assertEquals(CopyList.definition.callback_id, "slack#/functions/copy_list");
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Copy a list",
    input_parameters: {
      properties: {
        list_id: {
          type: SlackTypes.list_id,
          description: "Search all lists",
          title: "Select a list",
        },
        owner_id: {
          type: SlackTypes.user_id,
          description: "List owner id",
          title: "Owner",
        },
        name: {
          type: SchemaTypes.string,
          description: "Name of the list",
          title: "Name",
        },
        description: {
          type: SchemaTypes.string,
          description: "Description of the list",
          title: "Description",
        },
        emoji: {
          type: SchemaTypes.string,
          description: "Emoji for the list",
          title: "Emoji",
        },
        include_copied_list_records: {
          type: SchemaTypes.boolean,
          description: "Include records from the copied list",
          title: "Copy records",
        },
      },
      required: ["list_id", "owner_id", "name", "include_copied_list_records"],
    },
    output_parameters: {
      properties: {
        list_id: {
          type: SchemaTypes.string,
          description: "List ID",
          title: "List ID",
        },
        link: {
          type: SchemaTypes.string,
          description: "Link for the list",
          title: "Link",
        },
        list_id_value: {
          type: SlackTypes.list_id,
          description: "List title",
          title: "List title",
        },
      },
      required: [],
    },
  };
  const actual = CopyList.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("CopyList can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CopyList_slack_function",
    title: "Test CopyList",
    description: "This is a generated test to test CopyList",
  });
  testWorkflow.addStep(CopyList, {
    list_id: "test",
    owner_id: "test",
    name: "test",
    include_copied_list_records: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/copy_list");
  assertEquals(actual.inputs, {
    list_id: "test",
    owner_id: "test",
    name: "test",
    include_copied_list_records: "test",
  });
});

Deno.test("All outputs of Slack function CopyList should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CopyList_slack_function",
    title: "Test CopyList",
    description: "This is a generated test to test CopyList",
  });
  const step = testWorkflow.addStep(CopyList, {
    list_id: "test",
    owner_id: "test",
    name: "test",
    include_copied_list_records: "test",
  });
  assertExists(step.outputs.list_id);
  assertExists(step.outputs.link);
  assertExists(step.outputs.list_id_value);
});
