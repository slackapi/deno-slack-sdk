/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import { assertEquals, assertNotStrictEquals } from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import RemoveReaction from "./remove_reaction.ts";

Deno.test("RemoveReaction generates valid FunctionManifest", () => {
  assertEquals(
    RemoveReaction.definition.callback_id,
    "slack#/functions/remove_reaction",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Remove a reaction from a message",
    input_parameters: {
      properties: {
        message_context: {
          type: SlackTypes.message_context,
          description: "Select a message to unreact from",
          title: "Select a message to unreact from",
        },
        emoji: {
          type: SchemaTypes.string,
          description: "Reaction (emoji) name",
          title: "Emoji",
        },
      },
      required: ["message_context", "emoji"],
    },
    output_parameters: { properties: {}, required: [] },
  };
  const actual = RemoveReaction.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("RemoveReaction can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_RemoveReaction_slack_function",
    title: "Test RemoveReaction",
    description: "This is a generated test to test RemoveReaction",
  });
  testWorkflow.addStep(RemoveReaction, {
    message_context: "test",
    emoji: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/remove_reaction");
  assertEquals(actual.inputs, { message_context: "test", emoji: "test" });
});
