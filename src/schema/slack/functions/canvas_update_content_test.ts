/** This file was autogenerated. Follow the steps in src/schema/slack/functions/_scripts/README.md to rebuild **/
import {
  assertEquals,
  assertExists,
  assertNotStrictEquals,
} from "../../../dev_deps.ts";
import { DefineWorkflow } from "../../../workflows/mod.ts";
import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../schema_types.ts";
import SlackTypes from "../schema_types.ts";
import { SlackPrimitiveTypes } from "../../slack/types/mod.ts";
import CanvasUpdateContent from "./canvas_update_content.ts";

Deno.test("CanvasUpdateContent generates valid FunctionManifest", () => {
  assertEquals(
    CanvasUpdateContent.definition.callback_id,
    "slack#/functions/canvas_update_content",
  );
  const expected: ManifestFunctionSchema = {
    source_file: "",
    title: "Update a canvas",
    input_parameters: {
      properties: {
        canvas_update_type: {
          type: SchemaTypes.string,
          description: "Type of update",
          title: "Type of update",
        },
        channel_id: {
          type: SlackTypes.channel_id,
          description: "Channel name",
          title: "Select a channel",
        },
        canvas_id: {
          type: SlackPrimitiveTypes.canvas_id,
          description: "Search standalone canvases",
          title: "Select a canvas",
        },
        section_id: {
          type: SchemaTypes.string,
          description: "Select an option",
          title: "Choose which section to update",
        },
        action: {
          type: SchemaTypes.string,
          description: "Select an option",
          title: "How do you want to update?",
        },
        content: {
          type: SlackPrimitiveTypes.expanded_rich_text,
          description: "Add content to the canvas",
          title: "Content",
        },
      },
      required: ["action", "content"],
    },
    output_parameters: {
      properties: {
        canvas_id: {
          type: SlackPrimitiveTypes.canvas_id,
          description: "Canvas link",
          title: "Canvas link",
        },
      },
      required: ["canvas_id"],
    },
  };
  const actual = CanvasUpdateContent.export();

  assertNotStrictEquals(actual, expected);
});

Deno.test("CanvasUpdateContent can be used as a Slack function in a workflow step", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CanvasUpdateContent_slack_function",
    title: "Test CanvasUpdateContent",
    description: "This is a generated test to test CanvasUpdateContent",
  });
  testWorkflow.addStep(CanvasUpdateContent, {
    action: "test",
    content: "test",
  });
  const actual = testWorkflow.steps[0].export();

  assertEquals(actual.function_id, "slack#/functions/canvas_update_content");
  assertEquals(actual.inputs, { action: "test", content: "test" });
});

Deno.test("All outputs of Slack function CanvasUpdateContent should exist", () => {
  const testWorkflow = DefineWorkflow({
    callback_id: "test_CanvasUpdateContent_slack_function",
    title: "Test CanvasUpdateContent",
    description: "This is a generated test to test CanvasUpdateContent",
  });
  const step = testWorkflow.addStep(CanvasUpdateContent, {
    action: "test",
    content: "test",
  });
  assertExists(step.outputs.canvas_id);
});
