import {
  ParameterDefinition,
  ParameterSetDefinition,
} from "../../../../../parameters/mod.ts";
import {
  ManifestFunctionParameters,
  ManifestFunctionSchema,
} from "../../../../../manifest/manifest_schema.ts";
import { ICustomType } from "../../../../../types/types.ts";
import SchemaTypes from "../../../../schema_types.ts";
import SlackSchemaTypes from "../../../schema_types.ts";
import { InternalSlackTypes } from "../../../types/custom/mod.ts";
import { FunctionRecord } from "./types.ts";
import { getManifestFunctionSchemaFields } from "./template_utils.ts";
import { autogeneratedComment } from "./template_utils.ts";

type AllowedTypeValue = ICustomType | string;
type AllowedTypeValueObject = Record<string, AllowedTypeValue>;

const typeMap: Record<string, AllowedTypeValueObject> = {
  SchemaTypes,
  SlackTypes: SlackSchemaTypes,
  InternalSlackTypes,
};

const schemaTypeMap = Object.entries(typeMap).reduce<AllowedTypeValueObject>(
  (acc, [schemaKey, schemaTypes]) => {
    for (const typeKey in schemaTypes) {
      const val = schemaTypes[typeKey];
      if (val instanceof Object) {
        acc[val.id] = `${schemaKey}.${typeKey}`;
      } else {
        acc[val] = `${schemaKey}.${typeKey}`;
      }
    }
    return acc;
  },
  {},
);

const getParamType = (type: string | ICustomType): string =>
  type instanceof Object ? type.id : type;

/** @description returns a list of all fn parameters */
const getParameterList = (fn: FunctionRecord) => [
  ...fn?.input_parameters ?? [],
  ...fn?.output_parameters ?? [],
];

/** @description Whether or not a fn uses parameters from a defined type object */
const hasParamsFromTypeObject = (
  fn: FunctionRecord,
  typeObject: AllowedTypeValueObject,
) =>
  getParameterList(fn)
    .some((param) =>
      Object.values(typeObject)
        .map((val) => getParamType(val))
        .includes(getParamType(param.type))
    );

const propertyToTypeScriptString = (
  property: ParameterDefinition,
): string => {
  const typescript = [];
  typescript.push(
    `type: ${schemaTypeMap[getParamType(property.type)]}`,
  );
  if ("description" in property) {
    typescript.push(`description: "${property.description}"`);
  }
  if ("properties" in property) {
    if ("additionalProperties" in property) {
      typescript.push(`additionalProperties: ${property.additionalProperties}`);
    }
    if ("required" in property) {
      typescript.push(`required: ${JSON.stringify(property.required)}`);
    }
    typescript.push(
      `properties: {${propertiesToTypeScriptString(property["properties"])}}`,
    );
  }
  return typescript.join(",\n");
};

const propertiesToTypeScriptString = (
  properties: ParameterSetDefinition,
) => {
  const typescript: string[] = [];
  Object.entries(properties).forEach(([propertyKey, propertyValue]) => {
    typescript.push(
      `${propertyKey}: {${propertyToTypeScriptString(propertyValue)}}`,
    );
  });
  return typescript.join(",\n");
};

const parametersToTypeScriptString = (
  parameters: ManifestFunctionParameters,
) => {
  const typescript: string[] = [];
  typescript.push(
    `properties: {${propertiesToTypeScriptString(parameters.properties)}}`,
  );
  if (parameters.required) {
    typescript.push(`required: ${JSON.stringify(parameters.required)}`);
  }
  return typescript.join(",\n");
};

const functionToTypeScriptString = (
  callback_id: string,
  manifestFunctionSchema: ManifestFunctionSchema,
) => {
  const typescript: string[] = [];
  typescript.push(`callback_id: "${callback_id}"`);
  typescript.push(`source_file: "${manifestFunctionSchema.source_file}"`);
  if (manifestFunctionSchema.title) {
    typescript.push(`title: "${manifestFunctionSchema.title}"`);
  }
  if (manifestFunctionSchema.description) {
    typescript.push(`description: "${manifestFunctionSchema.description}"`);
  }
  typescript.push(
    `input_parameters: {${
      parametersToTypeScriptString(manifestFunctionSchema.input_parameters)
    }}`,
  );
  typescript.push(
    `output_parameters: {${
      parametersToTypeScriptString(manifestFunctionSchema.output_parameters)
    }}`,
  );
  return typescript.join(",\n");
};

export const SlackFunctionTemplate = (fn: FunctionRecord) => {
  const typescript: string[] = [];
  typescript.push(autogeneratedComment());
  typescript.push(
    `import { DefineFunction } from "../../../functions/mod.ts";`,
  );
  if (hasParamsFromTypeObject(fn, SchemaTypes)) {
    typescript.push('import SchemaTypes from "../../schema_types.ts";');
  }
  if (hasParamsFromTypeObject(fn, SlackSchemaTypes)) {
    typescript.push('import SlackTypes from "../schema_types.ts";');
  }
  if (hasParamsFromTypeObject(fn, InternalSlackTypes)) {
    typescript.push(
      'import { InternalSlackTypes } from "../types/custom/mod.ts";',
    );
  }
  typescript.push("");
  typescript.push(`export default DefineFunction({${
    functionToTypeScriptString(
      `slack#/functions/${fn.callback_id}`,
      getManifestFunctionSchemaFields(fn),
    )
  }});`);

  return typescript.join("\n");
};

export default SlackFunctionTemplate;
