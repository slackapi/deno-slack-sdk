import { pascalCase } from "https://deno.land/x/case@v2.1.0/mod.ts";
import {
  ParameterDefinition,
  ParameterSetDefinition,
} from "../../../../../parameters/mod.ts";
import {
  ManifestFunctionParameters,
  ManifestFunctionSchema,
} from "../../../../../manifest/manifest_schema.ts";
import { ICustomType } from "../../../../../types/types.ts";
import SchemaTypes from "../../../../schema_types.ts";
import SlackSchemaTypes from "../../../schema_types.ts";
import { InternalSlackTypes } from "../../../types/custom/mod.ts";
import { FunctionParameter, FunctionRecord } from "./types.ts";

type AllowedTypeValue = ICustomType | string;
type AllowedTypeValueObject = Record<string, AllowedTypeValue>;

const autogeneratedComment = () => {
  const time = new Date();
  return `/** This file was autogenerated on ${time.toDateString()}. Follow the steps in src/schema/slack/functions/README.md to rebuild **/`;
};

const typeMap: Record<string, AllowedTypeValueObject> = {
  SchemaTypes,
  SlackTypes: SlackSchemaTypes,
  InternalSlackTypes,
};

type LoadState<T> =
  | typeof SchemaTypes
  | typeof SlackSchemaTypes
  | typeof InternalSlackTypes;

const getValueType = (type: string) => {
  for (const k in SchemaTypes) {
    if (SchemaTypes[k] == type) {
      return typeof SchemaTypes[k];
    }
  }
};
const schemaTypeMap = Object.entries(typeMap).reduce<AllowedTypeValueObject>(
  (acc, [schemaKey, schemaTypes]) => {
    for (const typeKey in schemaTypes) {
      const val = schemaTypes[typeKey];
      if (val instanceof Object) {
        acc[val.id] = `${schemaTypes}.${schemaKey}`;
      } else {
        acc[val] = `${schemaTypes}.${schemaKey}`;
      }
    }
    return acc;
  },
  {},
);

const getSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, SchemaTypes)
    ? 'import SchemaTypes from "../../schema_types.ts";'
    : "";

const getSlackSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, SlackSchemaTypes)
    ? 'import SlackTypes from "../schema_types.ts";'
    : "";

const getInternalSlackSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, InternalSlackTypes)
    ? 'import { InternalSlackTypes } from "../types/custom/mod.ts";'
    : "";

const getParamType = (type: string | ICustomType): string =>
  type instanceof Object ? type.id : type;

/** @description returns a list of all fn parameters */
const getParameterList = (fn: FunctionRecord) => [
  ...fn?.input_parameters ?? [],
  ...fn?.output_parameters ?? [],
];

/** @description Whether or not a fn uses parameters from a defined type object */
const hasParamsFromTypeObject = (
  fn: FunctionRecord,
  typeObject: AllowedTypeValueObject,
) =>
  getParameterList(fn)
    .some((param) =>
      Object.values(typeObject)
        .map((val) => getParamType(val))
        .includes(getParamType(param.type))
    );

const getParameterDefinition = (
  param: FunctionParameter,
): ParameterDefinition => {
  // deno-lint-ignore no-explicit-any
  console.error(getValueType(param.type as string));
  const paramDef: { [key: string]: any } = {
    type: typeMap[getParamType(param.type)],
  };
  if (param.description) {
    paramDef.description = param.description;
  }
  if (param.items) {
    paramDef.items = param.items;
  }
  if (param.properties) {
    paramDef.properties = {};
    Object.entries(param.properties).forEach(([propertyKey, propertyValue]) => {
      paramDef.properties[propertyKey] = getParameterDefinition(propertyValue);
    });
    paramDef.additionalProperties = param.additionalProperties;
    paramDef.required = param.required;
  }
  return paramDef as ParameterDefinition;
};

const getParameterSetDefinition = (
  params: FunctionParameter[],
): ParameterSetDefinition => {
  const properties: ParameterSetDefinition = {};
  params.forEach((p) => {
    properties[p.name !== undefined ? p.name : ""] = getParameterDefinition(
      p,
    );
  });
  return properties;
};

const getManifestFunctionParameters = (
  functionParameters: FunctionParameter[],
): ManifestFunctionParameters => {
  return {
    properties: getParameterSetDefinition(functionParameters),
    required: functionParameters.filter((p) => p.is_required).map(
      (p) => p.name !== undefined ? p.name : "",
    ),
  };
};

export const getManifestFunctionSchemaFields = (
  fn: FunctionRecord,
): ManifestFunctionSchema => {
  return {
    source_file: "",
    title: fn.title,
    description: fn.description,
    input_parameters: getManifestFunctionParameters(fn.input_parameters),
    output_parameters: getManifestFunctionParameters(fn.output_parameters),
  };
};

export const propertyToTypeScriptString = (
  property: ParameterDefinition,
): string => {
  const typescript = [];
  typescript.push(`type: ${schemaTypeMap[getParamType(property.type)]}`);
  if ("description" in property) {
    typescript.push(`description: "${property.description}"`);
  }
  if ("properties" in property) {
    if ("additionalProperties" in property) {
      typescript.push(`additionalProperties: ${property.additionalProperties}`);
    }
    if ("required" in property) {
      typescript.push(`required: ${JSON.stringify(property.required)}`);
    }
    typescript.push(
      `properties: {${
        Object.entries(property["properties"]).forEach(
          ([propertyKey, propertyValue]) => {
            typescript.push(
              `${propertyKey}: {${propertyToTypeScriptString(propertyValue)}}`,
            );
          },
        )
      }}`,
    );
  }
  return typescript.join(",\n");
};

const propertiesToTypeScriptString = (
  properties: ParameterSetDefinition,
) => {
  const typescript: string[] = [];
  Object.entries(properties).forEach(([propertyKey, propertyValue]) => {
    typescript.push(
      `${propertyKey}: {${propertyToTypeScriptString(propertyValue)}}`,
    );
  });
  return typescript.join(",\n");
};

const parametersToTypeScriptString = (
  parameters: ManifestFunctionParameters,
) => {
  const typescript: string[] = [];
  typescript.push(
    `properties: {${propertiesToTypeScriptString(parameters.properties)}}`,
  );
  if (parameters.required) {
    typescript.push(`required: ${JSON.stringify(parameters.required)}`);
  }
  return typescript.join(",\n");
};

const functionToTypeScriptString = (
  callback_id: string,
  manifestFunctionSchema: ManifestFunctionSchema,
) => {
  const typescript: string[] = [];
  typescript.push(`callback_id: "${callback_id}"`);
  typescript.push(`source_file: "${manifestFunctionSchema.source_file}"`);
  if (manifestFunctionSchema.title) {
    typescript.push(`title: "${manifestFunctionSchema.title}"`);
  }
  if (manifestFunctionSchema.description) {
    typescript.push(`description: "${manifestFunctionSchema.description}"`);
  }
  typescript.push(
    `input_parameters: {${
      parametersToTypeScriptString(manifestFunctionSchema.input_parameters)
    }}`,
  );
  typescript.push(
    `output_parameters: {${
      parametersToTypeScriptString(manifestFunctionSchema.output_parameters)
    }}`,
  );
  return typescript.join(",\n");
};

export const SlackFunctionTemplate = (fn: FunctionRecord) => {
  const schemaTypesImport = getSchemaTypeImport(fn);
  const slackSchemaTypesImport = getSlackSchemaTypeImport(fn);
  const internalSlackSchemaTypesImport = getInternalSlackSchemaTypeImport(fn);
  const manifestFunctionSchemaFields = getManifestFunctionSchemaFields(fn);

  return `
    ${autogeneratedComment()}
    import { DefineFunction } from "../../../functions/mod.ts";${schemaTypesImport}${slackSchemaTypesImport}${internalSlackSchemaTypesImport}

    export default DefineFunction({${
    functionToTypeScriptString(
      `slack#/functions/${fn.callback_id}`,
      manifestFunctionSchemaFields,
    )
  }});
  `;
};

export const SlackFunctionModTemplate = (slackFunctions: FunctionRecord[]) => {
  const callbackIds = slackFunctions.map((fn) => fn.callback_id);
  const importStrings = callbackIds.map(renderImport).join("\n");

  const functionProps = slackFunctions.map((fn) =>
    renderFunctionPropWithType(fn)
  )
    .join(",");

  return `
    ${autogeneratedComment()}
    ${importStrings}

    const SlackFunctions = {
      ${functionProps}
    } as const;

    export default SlackFunctions;
  `;
};

export const getFunctionName = (callbackId: string) => {
  return pascalCase(callbackId);
};

export const renderImport = (callbackId: string) => {
  return `import ${getFunctionName(callbackId)} from "./${callbackId}.ts";`;
};

const renderFunctionPropWithType = (fn: FunctionRecord) => {
  return `${getFunctionName(fn.callback_id)}: ${
    getFunctionName(fn.callback_id)
  }`;
};
