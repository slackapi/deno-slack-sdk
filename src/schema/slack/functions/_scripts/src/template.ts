import { pascalCase } from "https://deno.land/x/case@v2.1.0/mod.ts";
import {
  ParameterDefinition,
  ParameterSetDefinition,
} from "../../../../../parameters/mod.ts";
import {
  ManifestFunctionParameters,
  ManifestFunctionSchema,
} from "../../../../../manifest/manifest_schema.ts";
import { ICustomType } from "../../../../../types/types.ts";
import SchemaTypes from "../../../../schema_types.ts";
import SlackSchemaTypes from "../../../schema_types.ts";
import { InternalSlackTypes } from "../../../types/custom/mod.ts";
import { FunctionParameter, FunctionRecord } from "./types.ts";

type AllowedTypeValue = ICustomType | string;
type AllowedTypeValueObject = Record<string, AllowedTypeValue>;

const autogeneratedComment = () => {
  const time = new Date();
  return `/** This file was autogenerated on ${time.toDateString()}. Follow the steps in src/schema/slack/functions/README.md to rebuild **/`;
};

const templatizeRequiredParams = (params: FunctionParameter[]) => {
  const requiredParams: string[] = params.filter((p) => p.is_required).map(
    (p) => p.name !== undefined ? p.name : "",
  );

  return requiredParams;
};

const getProperties = (
  params: FunctionParameter[],
): ParameterSetDefinition => {
  const properties: ParameterSetDefinition = {};
  params.forEach((p) => {
    properties[p.name !== undefined ? p.name : ""] = getParamDef(
      p,
    );
  });
  return properties;
};

const typeMap: Record<string, AllowedTypeValueObject> = {
  SchemaTypes,
  SlackTypes: SlackSchemaTypes,
  InternalSlackTypes,
};

const schemaTypeMap = Object.entries(typeMap).reduce<AllowedTypeValueObject>(
  (acc, [schemaKey, schemaTypes]) => {
    for (const typeKey in schemaTypes) {
      const val = schemaTypes[typeKey];
      if (val instanceof Object) {
        acc[val.id] = `${schemaKey}.${typeKey}`;
      } else {
        acc[val] = `${schemaKey}.${typeKey}`;
      }
    }
    return acc;
  },
  {},
);

const getParamDef = <P extends ParameterDefinition>(
  param: FunctionParameter,
): P => {
  // deno-lint-ignore no-explicit-any
  const paramDef: { [k: string]: any } = {
    type: schemaTypeMap[getParamType(param.type)],
    description: param.description,
    additionalProperties: param.additionalProperties,
  };
  if (param.properties) {
    paramDef.properties = {};
    Object.entries(param.properties).forEach(([propertyKey, propertyValue]) => {
      paramDef.properties[propertyKey] = getParamDef(propertyValue);
    });
  }
  if (param.items) {
    paramDef.items = {
      type: param.items.type,
    };
  }
  return paramDef as P;
};

const getSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, SchemaTypes)
    ? 'import SchemaTypes from "../../schema_types.ts";'
    : "";

const getSlackSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, SlackSchemaTypes)
    ? 'import SlackTypes from "../schema_types.ts";'
    : "";

const getInternalSlackSchemaTypeImport = (fn: FunctionRecord) =>
  hasParamsFromTypeObject(fn, InternalSlackTypes)
    ? 'import { InternalSlackTypes } from "../types/custom/mod.ts";'
    : "";

const getParamType = (type: string | ICustomType): string =>
  type instanceof Object ? type.id : type;

/** @description returns a list of all fn parameters */
const getParameterList = (fn: FunctionRecord) => [
  ...fn?.input_parameters ?? [],
  ...fn?.output_parameters ?? [],
];

/** @description Whether or not a fn uses parameters from a defined type object */
const hasParamsFromTypeObject = (
  fn: FunctionRecord,
  typeObject: AllowedTypeValueObject,
) =>
  getParameterList(fn)
    .some((param) =>
      Object.values(typeObject)
        .map((val) => getParamType(val))
        .includes(getParamType(param.type))
    );

export const getManifestFunctionSchemaFields = (fn: FunctionRecord) => {
  const ManifestFunctionSchemaFields: ManifestFunctionSchema = {
    source_file: "",
    title: fn.title,
    description: fn.description,
    input_parameters: {
      required: templatizeRequiredParams(fn.input_parameters),
      properties: getProperties(fn.input_parameters),
    },
    output_parameters: {
      required: templatizeRequiredParams(fn.output_parameters),
      properties: getProperties(fn.output_parameters),
    },
  };
  return ManifestFunctionSchemaFields;
};

export const propertyToTypeScriptString = <P extends ParameterDefinition>(
  property: P,
): string => {
  let typescriptString = `{
    type: ${getParamType(property.type)}`;
  if (property.description) {
    typescriptString += `,
    description: "${property.description}"`;
  }
  if ("properties" in property) {
    typescriptString += `,
        properties: ${propertiesToTypeScriptString(property.properties)}`;
    console.log("additionalProperties" in property);
    if ("additionalProperties" in property) {
      typescriptString += `,
        additionalProperties: ${property.additionalProperties}`;
    }
    if (property.required) {
      typescriptString += `,
          required: ${JSON.stringify(property.required)}`;
    }
  }
  typescriptString += `}`;
  return typescriptString;
};

const propertiesToTypeScriptString = (
  properties: ParameterSetDefinition,
) => {
  let typescriptString = `{`;
  Object.entries(properties).forEach(([propertyKey, propertyValue]) => {
    typescriptString += `${propertyKey}: ${
      propertyToTypeScriptString(propertyValue)
    },
    `;
  });
  typescriptString += `}`;
  return typescriptString;
};

const parametersToTypeScriptString = (
  parameters: ManifestFunctionParameters,
) => {
  let typescriptString = `{`;
  typescriptString += `
      properties: ${propertiesToTypeScriptString(parameters.properties)}`;
  if (parameters.required) {
    typescriptString += `,
      required: ${JSON.stringify(parameters.required)}`;
  }
  typescriptString += `
    }`;
  return typescriptString;
};

const functionToTypeScriptString = (
  callback_id: string,
  manifestFunctionSchema: ManifestFunctionSchema,
) => {
  let typescriptString = `{
    callback_id: "${callback_id}",
    source_file: "${manifestFunctionSchema.source_file}"`;
  if (manifestFunctionSchema.title) {
    typescriptString += `,
    title: "${manifestFunctionSchema.title}"`;
  }
  if (manifestFunctionSchema.description) {
    typescriptString += `,
    description: "${manifestFunctionSchema.description}"`;
  }
  typescriptString += `,
    input_parameters: ${
    parametersToTypeScriptString(manifestFunctionSchema.input_parameters)
  },
    output_parameters: ${
    parametersToTypeScriptString(manifestFunctionSchema.output_parameters)
  }
}`;
  return typescriptString;
};

export const SlackFunctionTemplate = (fn: FunctionRecord) => {
  const schemaTypesImport = getSchemaTypeImport(fn);
  const slackSchemaTypesImport = getSlackSchemaTypeImport(fn);
  const internalSlackSchemaTypesImport = getInternalSlackSchemaTypeImport(fn);
  const manifestFunctionSchemaFields = getManifestFunctionSchemaFields(fn);
  return `
    ${autogeneratedComment()}
    import { DefineFunction } from "../../../functions/mod.ts";${schemaTypesImport}${slackSchemaTypesImport}${internalSlackSchemaTypesImport}

    export default DefineFunction(${
    functionToTypeScriptString(
      `slack#/functions/${fn.callback_id}`,
      manifestFunctionSchemaFields,
    )
  });
  `;
};

export const SlackFunctionModTemplate = (slackFunctions: FunctionRecord[]) => {
  const callbackIds = slackFunctions.map((fn) => fn.callback_id);
  const importStrings = callbackIds.map(renderImport).join("\n");

  const functionProps = slackFunctions.map((fn) =>
    renderFunctionPropWithType(fn)
  )
    .join(",");

  return `
    ${autogeneratedComment()}
    ${importStrings}

    const SlackFunctions = {
      ${functionProps}
    } as const;

    export default SlackFunctions;
  `;
};

export const getFunctionName = (callbackId: string) => {
  return pascalCase(callbackId);
};

export const renderImport = (callbackId: string) => {
  return `import ${getFunctionName(callbackId)} from "./${callbackId}.ts";`;
};

const renderFunctionPropWithType = (fn: FunctionRecord) => {
  return `${getFunctionName(fn.callback_id)}: ${
    getFunctionName(fn.callback_id)
  }`;
};
