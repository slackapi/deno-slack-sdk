import {
  autogeneratedComment,
  getFunctionName,
  getSlackCallbackId,
  renderFunctionImport,
} from "./template_utils.ts";
import { DefineFunctionInput } from "../types.ts";
import {
  manifestFunctionFieldsToTypeScript,
  renderTypeImports,
} from "./template_function.ts";
import {
  ManifestFunctionParameters,
  ManifestFunctionSchema,
} from "../../../../../../manifest/manifest_schema.ts";
import SchemaTypes from "../../../../../schema_types.ts";

export const manifestFunctionToTypeScript = (
  manifestFunctionSchema: ManifestFunctionSchema,
) => {
  return `{${manifestFunctionFieldsToTypeScript(manifestFunctionSchema)}}`;
};

const renderFunctionManifestTest = (
  dfi: DefineFunctionInput,
) => {
  const functionName = getFunctionName(dfi.callbackId);
  const typescript: string[] = [];
  typescript.push(
    `assertEquals(${functionName}.definition.callback_id, "${
      getSlackCallbackId(dfi)
    }");`,
  );
  typescript.push(
    `const expected: ManifestFunctionSchema = ${
      manifestFunctionToTypeScript(
        dfi,
      )
    };`,
  );
  typescript.push(`const actual = ${functionName}.export();`);
  typescript.push("");
  typescript.push(`assertEquals(actual, expected);`);
  return `() => {${typescript.join("\n")}}`;
};

const workflowToTypeScript = (functionName: string) => {
  const typescript: string[] = [];
  typescript.push(`callback_id: "test_${functionName}_built_in"`);
  typescript.push(`title: "Test ${functionName}"`);
  typescript.push(
    `description: "This is a generated test to test ${functionName}"`,
  );
  return `{${typescript.join(", \n")}}`;
};

const requiredParametersToTypeScript = (
  parameters: ManifestFunctionParameters,
) => {
  const typescript: string[] = [];
  if (parameters.required) {
    Object.values(parameters.required).forEach((value, _index, _array) => {
      const parameter: string = value as string;
      switch (
        parameters.properties[parameter].type
      ) {
        case SchemaTypes.integer:
          typescript.push(`${parameter}: 1`);
          break;
        case SchemaTypes.boolean:
          typescript.push(`${parameter}: true`);
          break;
        case SchemaTypes.number:
          typescript.push(`${parameter}: 1.5`);
          break;
        case SchemaTypes.array:
          typescript.push(`${parameter}: []`);
          break;
        case SchemaTypes.object:
          typescript.push(`${parameter}: {}`); // TODO make this recursive
          break;
        default:
          typescript.push(`${parameter}: "test"`);
      }
    });
  }
  return `{${typescript.join(",\n")}}`;
};

const renderWorkflowStepTest = (dfi: DefineFunctionInput) => {
  const functionName = getFunctionName(dfi.callbackId);
  const inputParameters = requiredParametersToTypeScript(
    dfi.input_parameters,
  );
  const typescript: string[] = [];
  typescript.push(
    `const testWorkflow = DefineWorkflow(${
      workflowToTypeScript(functionName)
    });`,
  );
  typescript.push(
    `testWorkflow.addStep(${functionName}, ${inputParameters});`,
  );
  typescript.push(`const actual = testWorkflow.steps[0].export();`);
  typescript.push("");
  typescript.push(
    `assertEquals(actual.function_id, "${getSlackCallbackId(dfi)}");`,
  );
  typescript.push(`assertEquals(actual.inputs, ${inputParameters});`);
  return `() => {${typescript.join("\n")}}`;
};

export function SlackTestFunctionTemplate(
  defineFunctionInput: DefineFunctionInput,
): string {
  const typescript: string[] = [];
  typescript.push(autogeneratedComment());
  typescript.push(`import { assertEquals } from "../../../dev_deps.ts";`);
  typescript.push(
    `import { DefineWorkflow } from "../../../workflows/mod.ts";`,
  );
  typescript.push(
    `import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";`,
  );
  typescript.push(renderTypeImports(defineFunctionInput));
  typescript.push(renderFunctionImport(defineFunctionInput.callbackId));
  typescript.push("");
  typescript.push(
    `Deno.test("${
      getFunctionName(defineFunctionInput.callbackId)
    } generates valid FunctionManifest", ${
      renderFunctionManifestTest(defineFunctionInput)
    });`,
  );
  typescript.push("");
  typescript.push(
    `Deno.test("${
      getFunctionName(defineFunctionInput.callbackId)
    } can be used as a built-in function in a workflow step", ${
      renderWorkflowStepTest(defineFunctionInput)
    });`,
  );

  return typescript.join("\n");
}

export default SlackTestFunctionTemplate;
