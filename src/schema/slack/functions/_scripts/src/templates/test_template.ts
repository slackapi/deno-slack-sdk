import {
  autogeneratedComment,
  getFunctionName,
  getSlackCallbackId,
  renderFunctionImport,
  renderTypeImports,
} from "./template_utils.ts";
import { FunctionParameter, FunctionRecord } from "../types.ts";
import { manifestFunctionFieldsToTypeScript } from "./template_function.ts";
import SchemaTypes from "../../../../../schema_types.ts";

export const manifestFunctionToTypeScript = (
  functionRecord: FunctionRecord,
) => {
  return `{${manifestFunctionFieldsToTypeScript(functionRecord)}}`;
};

const renderFunctionManifestTest = (
  functionRecord: FunctionRecord,
) => {
  const functionName = getFunctionName(functionRecord.callback_id);
  const typescript: string[] = [];
  typescript.push(
    `assertEquals(${functionName}.definition.callback_id, "${
      getSlackCallbackId(functionRecord)
    }");`,
  );
  typescript.push(
    `const expected: ManifestFunctionSchema = ${
      manifestFunctionToTypeScript(
        functionRecord,
      )
    };`,
  );
  typescript.push(`const actual = ${functionName}.export();`);
  typescript.push("");
  typescript.push(`assertEquals(actual, expected);`);
  return `() => {${typescript.join("\n")}}`;
};

const workflowToTypeScript = (functionName: string) => {
  const typescript: string[] = [];
  typescript.push(`callback_id: "test_${functionName}_built_in"`);
  typescript.push(`title: "Test ${functionName}"`);
  typescript.push(
    `description: "This is a generated test to test ${functionName}"`,
  );
  return `{${typescript.join(", \n")}}`;
};

const getInputValue = (name: string, type: string) => {
  switch (type) {
    case SchemaTypes.integer:
      return `${name}: 1`;
    case SchemaTypes.boolean:
      return `${name}: true`;
    case SchemaTypes.number:
      return `${name}: 1.5`;
    case SchemaTypes.array:
      return `${name}: []`;
    case SchemaTypes.object:
      return `${name}: {}`; // TODO make this recursive
    default:
      return `${name}: "test"`;
  }
};

const requiredParametersToTypeScript = (
  parameters: FunctionParameter[],
) => {
  const typescript: string[] = [];
  parameters.forEach((parameter: FunctionParameter) => {
    if (parameter.is_required) {
      typescript.push(getInputValue(parameter.name, parameter.type));
    }
  });
  return `{${typescript.join(",\n")}}`;
};

const renderWorkflowStepTest = (dfi: FunctionRecord) => {
  const functionName = getFunctionName(dfi.callback_id);
  const inputParameters = requiredParametersToTypeScript(
    dfi.input_parameters,
  );
  const typescript: string[] = [];
  typescript.push(
    `const testWorkflow = DefineWorkflow(${
      workflowToTypeScript(functionName)
    });`,
  );
  typescript.push(
    `testWorkflow.addStep(${functionName}, ${inputParameters});`,
  );
  typescript.push(`const actual = testWorkflow.steps[0].export();`);
  typescript.push("");
  typescript.push(
    `assertEquals(actual.function_id, "${getSlackCallbackId(dfi)}");`,
  );
  typescript.push(`assertEquals(actual.inputs, ${inputParameters});`);
  return `() => {${typescript.join("\n")}}`;
};

export function SlackTestFunctionTemplate(
  defineFunctionInput: FunctionRecord,
): string {
  const typescript: string[] = [];
  typescript.push(autogeneratedComment());
  typescript.push(`import { assertEquals } from "../../../dev_deps.ts";`);
  typescript.push(
    `import { DefineWorkflow } from "../../../workflows/mod.ts";`,
  );
  typescript.push(
    `import { ManifestFunctionSchema } from "../../../manifest/manifest_schema.ts";`,
  );
  typescript.push(renderTypeImports(defineFunctionInput));
  typescript.push(renderFunctionImport(defineFunctionInput.callback_id));
  typescript.push("");
  typescript.push(
    `Deno.test("${
      getFunctionName(defineFunctionInput.callback_id)
    } generates valid FunctionManifest", ${
      renderFunctionManifestTest(defineFunctionInput)
    });`,
  );
  typescript.push("");
  typescript.push(
    `Deno.test("${
      getFunctionName(defineFunctionInput.callback_id)
    } can be used as a built-in function in a workflow step", ${
      renderWorkflowStepTest(defineFunctionInput)
    });`,
  );

  return typescript.join("\n");
}

export default SlackTestFunctionTemplate;
