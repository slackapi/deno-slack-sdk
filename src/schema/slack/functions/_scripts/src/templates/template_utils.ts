import { pascalCase } from "https://deno.land/x/case@v2.1.0/mod.ts";
import { DefineFunctionInput } from "../types.ts";
import SchemaTypes from "../../../../../schema_types.ts";
import SlackTypes from "../../../../schema_types.ts";
import { InternalSlackTypes } from "../../../../types/custom/mod.ts";
import { AllowedTypeValue, AllowedTypeValueObject } from "./types.ts";
import { TypedParameterDefinition } from "../../../../../../parameters/definition_types.ts";

export function autogeneratedComment(): string {
  const time = new Date();
  return `/** This file was autogenerated on ${time.toDateString()}. Follow the steps in src/schema/slack/functions/README.md to rebuild **/`;
}

export function renderFunctionImport(callbackId: string): string {
  return `import ${getFunctionName(callbackId)} from "./${callbackId}.ts";`;
}

export function getFunctionName(callbackId: string): string {
  return pascalCase(callbackId);
}

export function getSlackCallbackId(
  defineFunctionInput: DefineFunctionInput,
): string {
  return `slack#/functions/${defineFunctionInput.callbackId}`;
}

export function getParameterType(type: AllowedTypeValue): string {
  return type instanceof Object ? type.id : type;
}

/** @description returns a list of all fn parameters */
const getParameterList = (
  fn: DefineFunctionInput,
): TypedParameterDefinition[] => [
  ...Object.entries(fn.input_parameters.properties).map(([_key, value]) =>
    value
  ),
  ...Object.entries(fn.output_parameters.properties).map(([_key, value]) =>
    value
  ),
];

/** @description Whether or not a fn uses parameters from a defined type object */
const hasParamsFromTypeObject = (
  fn: DefineFunctionInput,
  typeObject: AllowedTypeValueObject,
): boolean =>
  getParameterList(fn).some((param) =>
    Object.values(typeObject)
      .map((val) => getParameterType(val))
      .includes(getParameterType(param.type))
  );

export function renderTypeImports(defineFunctionInput: DefineFunctionInput) {
  const typescript: string[] = [];
  if (hasParamsFromTypeObject(defineFunctionInput, SchemaTypes)) {
    typescript.push('import SchemaTypes from "../../schema_types.ts";');
  }
  if (hasParamsFromTypeObject(defineFunctionInput, SlackTypes)) {
    typescript.push('import SlackTypes from "../schema_types.ts";');
  }
  if (hasParamsFromTypeObject(defineFunctionInput, InternalSlackTypes)) {
    typescript.push(
      'import { InternalSlackTypes } from "../types/custom/mod.ts";',
    );
  }
  return typescript.join("\n");
}
