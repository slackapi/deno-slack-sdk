import { isCustomType } from "../../../../../../types/mod.ts";
import SchemaTypes from "../../../../../schema_types.ts";
import SlackSchemaTypes from "../../../../schema_types.ts";
import { InternalSlackTypes } from "../../../../types/custom/mod.ts";
import {
  FunctionParameter,
  FunctionProperties,
  FunctionProperty,
  FunctionRecord,
} from "../types.ts";
import { isArrayFunctionProperty, isObjectFunctionProperty } from "../utils.ts";
import {
  autogeneratedComment,
  getSlackCallbackId,
  renderTypeImports,
  sanitize,
} from "./template_utils.ts";
import { AllowedTypeValue, AllowedTypeValueObject } from "./types.ts";

const typeMap: Record<string, AllowedTypeValueObject> = {
  SchemaTypes,
  SlackTypes: SlackSchemaTypes,
  InternalSlackTypes,
};

const schemaTypeMap = Object.entries(typeMap).reduce<Record<string, string>>(
  (acc, [schemaKey, schemaTypes]) => {
    for (const schemaType in schemaTypes) {
      const value: AllowedTypeValue = schemaTypes[schemaType];
      const type: string = isCustomType(value) ? value.id : value;
      acc[type] = `${schemaKey}.${schemaType}`;
    }
    return acc;
  },
  {},
);

const propertyToTypeScript = (
  property: FunctionProperty,
): string => {
  const typescript = [];
  typescript.push(
    `type: ${schemaTypeMap[property.type]}`,
  );
  if (property.description) {
    typescript.push(`description: ${sanitize(property.description)}`);
  }
  if (property.title) {
    typescript.push(`title: ${sanitize(property.title)}`);
  }
  if (isArrayFunctionProperty(property)) {
    typescript.push(`items: ${propertyToTypeScript(property.items)}`);
  }
  if (isObjectFunctionProperty(property)) {
    typescript.push(
      `properties: ${propertiesToTypeScript(property.properties)}`,
    );
    typescript.push(
      `additionalProperties: ${property.additionalProperties ?? true}`,
    );
    typescript.push(`required: ${JSON.stringify(property.required ?? [])}`);
  }
  return `{${typescript.join(",\n")}}`;
};

const propertiesToTypeScript = (
  properties: FunctionProperties,
) => {
  const typescript: string[] = [];
  Object.entries(properties).forEach(([propertyKey, property]) => {
    typescript.push(
      `${propertyKey}: ${propertyToTypeScript(property)}`,
    );
  });
  return `{${typescript.join(",\n")}}`;
};

const manifestParametersToTypeScript = (
  functionParameters: FunctionParameter[],
) => {
  const typescript: string[] = [];
  typescript.push(
    `properties: {${
      functionParameters.map((parameter) =>
        `${parameter.name}: ${propertyToTypeScript(parameter)}`
      ).join(",\n")
    }}`,
  );
  typescript.push(`required: ${
    JSON.stringify(
      functionParameters.filter((p) => p.is_required).map(
        (p) => p.name,
      ),
    )
  }`);
  return `{${typescript.join(",\n")}}`;
};

export function manifestFunctionFieldsToTypeScript(
  functionRecord: FunctionRecord,
) {
  const typescript: string[] = [];
  typescript.push(`source_file: ""`);
  if (functionRecord.title) {
    typescript.push(
      `title: ${sanitize(functionRecord.title)}`,
    );
  }
  if (functionRecord.description) {
    typescript.push(
      `description: ${sanitize(functionRecord.description)}`,
    );
  }
  typescript.push(
    `input_parameters: ${
      manifestParametersToTypeScript(functionRecord.input_parameters)
    }`,
  );
  typescript.push(
    `output_parameters: ${
      manifestParametersToTypeScript(functionRecord.output_parameters)
    }`,
  );
  return typescript.join(",\n");
}

const defineFunctionInputToTypeScript = (
  functionRecord: FunctionRecord,
) => {
  const typescript: string[] = [];
  typescript.push(
    `callback_id: ${sanitize(getSlackCallbackId(functionRecord))}`,
  );
  typescript.push(manifestFunctionFieldsToTypeScript(functionRecord));
  return `{${typescript.join(",\n")}}`;
};

export function SlackFunctionTemplate(
  functionRecord: FunctionRecord,
): string {
  const typescript: string[] = [];
  typescript.push(autogeneratedComment());
  typescript.push(
    `import { DefineFunction } from "../../../functions/mod.ts";`,
  );
  typescript.push(renderTypeImports(functionRecord));
  typescript.push("");
  typescript.push(
    `export default DefineFunction(${
      defineFunctionInputToTypeScript(functionRecord)
    });`,
  );

  return typescript.join("\n");
}

export default SlackFunctionTemplate;
