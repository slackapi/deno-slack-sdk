import { pascalCase } from "https://deno.land/x/case@v2.1.0/mod.ts";
import { ParameterSetDefinition } from "../../../../../parameters/types.ts";
import { ParameterDefinition } from "../../../../../parameters/definition_types.ts";
import {
  ManifestFunctionParameters,
  ManifestFunctionSchema,
} from "../../../../../manifest/manifest_schema.ts";
import {
  DefineFunctionInput,
  FunctionParameter,
  FunctionRecord,
} from "./types.ts";

export const autogeneratedComment = () => {
  const time = new Date();
  return `/** This file was autogenerated on ${time.toDateString()}. Follow the steps in src/schema/slack/functions/README.md to rebuild **/`;
};

export const renderFunctionImport = (callbackId: string) => {
  return `import ${getFunctionName(callbackId)} from "./${callbackId}.ts";`;
};

export const getFunctionName = (callbackId: string) => {
  return pascalCase(callbackId);
};

const getParameterDefinition = (
  param: FunctionParameter,
): ParameterDefinition => {
  // deno-lint-ignore no-explicit-any
  const paramDef: { [key: string]: any } = {
    type: param.type,
  };
  if (param.description) {
    paramDef.description = param.description;
  }
  if (param.items) {
    paramDef.items = param.items;
  }
  if (param.properties) {
    paramDef.properties = {};
    Object.entries(param.properties).forEach(([propertyKey, propertyValue]) => {
      paramDef.properties[propertyKey] = getParameterDefinition(propertyValue);
    });
    paramDef.additionalProperties = param.additionalProperties;
    paramDef.required = param.required;
  }
  return paramDef as ParameterDefinition;
};

const getParameterSetDefinition = (
  params: FunctionParameter[],
): ParameterSetDefinition => {
  const properties: ParameterSetDefinition = {};
  params.forEach((p) => {
    properties[p.name!] = getParameterDefinition(
      p,
    );
  });
  return properties;
};

const getManifestFunctionParameters = (
  functionParameters: FunctionParameter[],
): ManifestFunctionParameters => {
  return {
    properties: getParameterSetDefinition(functionParameters),
    required: functionParameters.filter((p) => p.is_required).map(
      (p) => p.name!,
    ),
  };
};

export const getManifestFunctionSchema = (
  fn: FunctionRecord,
): ManifestFunctionSchema => {
  return {
    source_file: "",
    title: fn.title,
    description: fn.description,
    input_parameters: getManifestFunctionParameters(fn.input_parameters),
    output_parameters: getManifestFunctionParameters(fn.output_parameters),
  };
};

export const getDefineFunctionInput = (
  fn: FunctionRecord,
): DefineFunctionInput => {
  return {
    ...getManifestFunctionSchema(fn),
    ...{ callback_id: `slack#/functions/${fn.callback_id}` },
  };
};
