/** This is an autogenerated file. Run ./.slack/sdk/schema/slack/functions/_scripts/generate to rebuild **/
import { SlackFunction } from "../../../functions/mod.ts";
import {
  ParameterSetDefinition,
  RequiredParameters,
} from "../../../parameters/mod.ts";
import AddPin from "./add_pin.ts";
// import AddUserToUsergroup from "./add_user_to_usergroup.ts";
import ArchiveChannel from "./archive_channel.ts";
import CreateChannel from "./create_channel.ts";
// import CreateUsergroup from "./create_usergroup.ts";
// import Delay from "./delay.ts";
import InviteUserToChannel from "./invite_user_to_channel.ts";
// import RemoveUserFromUsergroup from "./remove_user_from_usergroup.ts";
import RenameChannel from "./rename_channel.ts";
import SendEphemeralMessage from "./send_ephemeral_message.ts";
import SendMessage from "./send_message.ts";
import UpdateChannelTopic from "./update_channel_topic.ts";

const SlackFunctions = {
  AddPin: AddPin as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Pin message to this channel";
      };
      message: {
        type: "string";
        description: "Message URL or timestamp";
      };
    },
    ParameterSetDefinition,
    ("channel_id" | "message")[],
    RequiredParameters<ParameterSetDefinition>
  >,
  // AddUserToUsergroup: AddUserToUsergroup as SlackFunction<
  //   {
  //     usergroup_id: {
  //       type: "slack#/types/usergroup_id";
  //       description: "User group";
  //     };
  //     user_id: {
  //       type: "slack#/types/user_id";
  //       description: "Person to add to the user group";
  //     };
  //   },
  //   {
  //     usergroup_id: {
  //       type: "slack#/types/usergroup_id";
  //       description: "Updated usergroup";
  //     };
  //   },
  //   ("usergroup_id" | "user_id")[],
  //   ("usergroup_id")[]
  // >,
  ArchiveChannel: ArchiveChannel as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Channel to archive";
      };
    },
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "The channel that was archived";
      };
    },
    ("channel_id")[],
    ("channel_id")[]
  >,
  CreateChannel: CreateChannel as SlackFunction<
    {
      channel_name: {
        type: "string";
        description: "Channel Name";
      };
      is_private: {
        type: "boolean";
        description: "Make Private";
      };
    },
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Created Channel";
      };
    },
    ("channel_name")[],
    ("channel_id")[]
  >,
  // CreateUsergroup: CreateUsergroup as SlackFunction<
  //   {
  //     usergroup_handle: {
  //       type: "string";
  //       description: "User group name";
  //     };
  //     usergroup_name: {
  //       type: "string";
  //       description: "User group friendly name";
  //     };
  //   },
  //   {
  //     usergroup_id: {
  //       type: "slack#/types/usergroup_id";
  //       description: "Created Usergroup";
  //     };
  //   },
  //   ("usergroup_handle" | "usergroup_name")[],
  //   ("usergroup_id")[]
  // >,
  // Delay: Delay as SlackFunction<
  //   {
  //     minutes_to_delay: {
  //       type: "integer";
  //       description: "Minutes to Delay";
  //     };
  //   },
  //   ParameterSetDefinition,
  //   ("minutes_to_delay")[],
  //   RequiredParameters<ParameterSetDefinition>
  // >,
  InviteUserToChannel: InviteUserToChannel as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Channel";
      };
      user_id: {
        type: "slack#/types/user_id";
        description: "User";
      };
    },
    {
      user_id: {
        type: "slack#/types/user_id";
        description: "Invited User";
      };
    },
    ("channel_id" | "user_id")[],
    ("user_id")[]
  >,
  // RemoveUserFromUsergroup: RemoveUserFromUsergroup as SlackFunction<
  //   {
  //     usergroup_id: {
  //       type: "slack#/types/usergroup_id";
  //       description: "User group";
  //     };
  //     user_ids: {
  //       type: "array";
  //       description: "Users to be removed from user group";
  //       items: {
  //         type: "slack#/types/user_id";
  //       };
  //     };
  //   },
  //   {
  //     usergroup_id: {
  //       type: "slack#/types/usergroup_id";
  //       description: "Updated usergroup";
  //     };
  //   },
  //   ("usergroup_id" | "user_ids")[],
  //   RequiredParameters<ParameterSetDefinition>
  // >,
  RenameChannel: RenameChannel as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Channel to rename";
      };
      channel_name: {
        type: "string";
        description: "New channel name";
      };
    },
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Renamed Channel";
      };
    },
    ("channel_id" | "channel_name")[],
    ("channel_id")[]
  >,
  SendEphemeralMessage: SendEphemeralMessage as SlackFunction<
    {
      user_id: {
        type: "slack#/types/user_id";
        description: "Send this message to this person";
      };
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Send this message in this channel";
      };
      message: {
        type: "string";
        description: "Message text";
      };
      thread_ts: {
        type: "string";
        description: "Another Message's ts value to make this message a reply";
      };
    },
    {
      ts: {
        type: "string";
        description: "Timestamp of the message that was sent";
      };
    },
    ("user_id" | "channel_id" | "message")[],
    ("ts")[]
  >,
  SendMessage: SendMessage, /* as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Send this message to";
      };
      message: {
        type: "string";
        description: "Message Text";
      };
      thread_ts: {
        type: "string";
        description: "Another Message's ts value to make this message a reply";
      };
      // metadata: {
      //   type: "object";
      //   description: "The message metadata";
      //   required: ["event_type", "event_payload"];
      //   additionalProperties: true;
      //   properties: {
      //     event_type: {
      //       type: "string";
      //     };
      //     event_payload: {
      //       type: "object";
      //     };
      //   };
      // };
    },
    {
      ts: {
        type: "string";
        description: "Timestamp of the message that was sent";
      };
    },
    ("channel_id" | "message")[],
    ("ts")[]
  > */
  UpdateChannelTopic: UpdateChannelTopic as SlackFunction<
    {
      channel_id: {
        type: "slack#/types/channel_id";
        description: "Channel";
      };
      topic: {
        type: "string";
        description: "New topic";
      };
    },
    {
      topic: {
        type: "string";
        description: "The string to which the channel topic was updated";
      };
    },
    ("channel_id" | "topic")[],
    ("topic")[]
  >,
} as const;

export default SlackFunctions;
